#!/usr/bin/env bash

# ╭───────────────────────────────────────────────────────╮
# │ NavigationMenu⠀ ⠀⠀⠀⠀⠀⠀⢀⡆⠀⠀⠀⠀⠀⠀⠀⣆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣶⡀⠀⠀⠀⠀⠀⠀ │
# │         ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣾⡇⠀⠀⠀⠀⠀⠀⠀⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⣧⠀⠀⠀⠀⠀⠀ │
# │ @Author:⠀⠀⠀⠀⠀⠀⠀  ⠀⠀⠀⠀⠀⣿⡇⠀⠀⠀⠀⠀⠀⠀⡿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⣿⣿⣿⣆⠀⠀⠀⠀⠀ │
# │ -⠀TheDirkKnight⠀⠀⠀⠀⠀⠀⢸⣿⣿⠀⠀⠀⠀⠀⠀⠀⠃⣿⡄⠀⠀⠀⠀⠀⠀⠀⠀⢠⣿⣿⣿⣿⣿⣆⠀⠀⠀⠀ │
# │ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣷⣼⣿⣇⠀⠀⠀⠀⠀⠀⠀⣰⣿⣿⣿⣿⣿⣿⣿⣆⠀⠀  │
# │ @Contact:⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⣰⣿⣿⣿⠋⠉⠙⣿⣿⣿⣆⠀  │
# │ -⠀github.com/DiSc21⠀⠀⠈⣠⣼⣿⣿⣿⣿⣿⣿⣿⣿⡏⠀⠀⠀⠀⠀⠀⣰⣿⣿⣿⡇⠀⠀⠀⢸⣿⣿⣟⣆  │
# │ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢙⡻⢿⣿⡿⡟⣿⡿⠟⣛⠁⠀⠀⠀⠀⠀⣴⣿⠿⠛⠋⠁BTW⠈⠙⠛⠿⣿⣦⠀│
# │ @Creation:⠀⠀           ⠉⠓⠂⠁⡀⠀⠐⠛⠁⠀⠀⠀⠀⠀⠘⠉I tried using⠉⠃│
# │ -⠀2025/02/18⠀⠀⣀⣠⣴⡾⠛⠉⠀     ⢠⡇⠀⠀⠀⠀⠀⠀⣸⣿⣦⣄⡀⠀⠀ ⠀Arch!  ⠀⠀⠀⠀│
# │ ⠀ ⠀⠀⠀⠀⠀⢀⣀⣀⣤⣤⣶⣿⣿⣿⣿⣿⣷⣆⠀⠀⠀⠀⠀.__, ⠀⠀⠀⠀⠀⠈⣻⣿⣿⣿⣷⣶⣤⣤⣤⣄⣀⠀⠀⠀⠀⠀⠀⠀│
# │ ⠀ ⠀⠀⢀⣴⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠁⠀⠀⠀⠀    ⠀⠀⠀⠀⠀⠀⠀⠀⠙⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⡄⠀⠀⠀⠀│
# │ ⠀ ⠀⡾⣿⣿⣿⣿⠿⠋⢁⣿⣿⣿⣿⣿⣿⣟⣥⣶⢿⡛⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢙⡻⢷⣿⣿⣿⣿⣿⣿⣿⡟⠿⠿⣿⣿⣿⣿⠀⠀⠀⠀│
# │ ⠀ ⠀⠀⣿⣿⠟⠁⠀⢠⣿⣿⣿⣿⣿⣿⡿⢟⣭⣶⣿⣷⣄⠀⠀⠀⣤⣀⡄⠀⠀⢀⣴⣿⣿⣷⣝⡻⣿⣿⣿⣿⣿⣿⣦⡀⠀⠉⠛⢿⠀⠀⠀⠀│
# │ ⠀ ⠀⠀⠿⠁⠀⠀⠀⠋⠁⣿⣿⣿⡿⢋⣴⣿⣿⣿⣿⣿⣿⣿⣶⣾⣿⣿⣿⣶⣿⣿⣿⣿⣿⣿⣿⣿⣮⡻⣿⣿⣿⠯⠉⠙⠀⠀⠀⠀⠀⠀⠀⠀│
# │ ⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠘⠁⠽⠋⠠⠿⠿⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠿⠷⠌⠻⠟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│
# │ ⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ │
# │ @License: MIT ⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠈⠻⣿⣿⠟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│
# │ ⠀  ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⠏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀│
# │ @Copyright: 2025 (©) TheDirkKnight                    │
# ╰───────────────────────────────────────────────────────╯

## @brief: Json based navigation menu for bash inspired
## by the X11 menu jgmenu https://github.com/jgmenu/jgmenu
##
## @StyleGuide (similar https://google.github.io/styleguide/shellguide.html):
## - prefer local/readonly over declare
## - don't use eval ... ( didn't get it to work without yet )
## - don't use globals out of convenience
## - add doxygen comments
##   - first line '## @fn' for bash-doxygen filter
##   - opening brace '{' in same line as functions declaration
##   - all "non-trivial" functions should be documented
## - Variable/Function naming
##   - camelCase for functions (note: google wants snake_case, me not)
##   - snake_case_variables
##   - CAPITAL_WITH_UNDERSCORES consts
## - weird: prefix name-references with 'nr_'+fun_name to ensure unique name
## - weird: try to avoid globals
## - weird: pass non-"name-reference" function-parameters quoted
##
## @dependencies (non-optional):
## - bash 4.3 (for associative arrays with name references)
## - jq (for json parsing)
## - grep/sed/awk, ... well
##
## @dependencies (optional):
## - lolcat (for colorized menus)
## - boxes (for boxes surrounding the menus)
##
## @usage: navimen.sh <config.json>
##

# just for debugging
#set -o xtrace

# some readonly colors
# a colored error string


# ERROR CODES
# -----------

# JSON KEYS
# ---------


# --------------------------
# SHARED_OBJECTS DEFINITIONS
# --------------------------

# SHARED_OBJECTS: VIEWS/METADATA DEFINITION


# -----------------------
# CORE_OBJECT DEFINITIONS
# -----------------------

# CORE_OBJECT: CONFIG DEFINITIOND_POST}" \
)

# CORE_OBJECT: MODES DEFINITIONFILTER}" \
)

# CORE_OBJECT: VIEWS DEFINITION


# JSON BASE LEVEL DEFINITION
# --------------------------ES}" \
)


# JSON OBJECT DEFINITIONS
# -----------------------


# # Get home via ~ and pwd
# pushd ~ > /dev/null
# HOME_DIR=$( pwd )
# readonly HOME_DIR
# popd > /dev/null

# # create escaped home dir for sed usage
# ESCAPED_HOME_DIR=$( printf '%s\n' "${HOME_DIR}" | sed -e 's/[]\/$*.^[]/\\&/g' )
# readonly ESCAPED_HOME_DIR

################################################################################
#  888    888 8888888888 888      8888888b.  8888888888 8888888b.   .d8888b.   #
#  888    888 888        888      888   Y88b 888        888   Y88b d88P  Y88b  #
#  888    888 888        888      888    888 888        888    888 Y88b.       #
#  8888888888 8888888    888      888   d88P 8888888    888   d88P  "Y888b.    #
#  888    888 888        888      8888888P"  888        8888888P"      "Y88b.  #
#  888    888 888        888      888        888        888 T88b         "888  #
#  888    888 888        888      888        888        888  T88b  Y88b  d88P  #
#  888    888 8888888888 88888888 888        8888888888 888   T88b  "Y8888P"   #
################################################################################

## @fn
##
## @brief check if a json node exists
##
## @param1[in] config_json: file name of the json config
## @param2[in] node_name: the json node/field to parse
## @param3[out] nr_has_node_return: boolean return
##
## @throws ERR_WRONG_NUM_OF_INPUTS: for wrong number of arguments
## @throws ERR_FILE_NOT_FOUND: if config json not found
##
## @return true or falls via echo
##

## @fn
##
## @brief get type of json node
##
## @param1[in] config_json: file name of the json config
## @param2[in] node_name: the json node/field to parse
## @param3[out] nrstr_get_json_type_return: string describing type of the requested node
##
## @throws ERR_WRONG_NUM_OF_INPUTS: for wrong number of arguments
## @throws ERR_FILE_NOT_FOUND (via hasNode): if config json not found
## @throws ERR_JSON_NODE_NOT_FOUND: if no json-node matching param2 is found
##

## @fn
##
## @brief read configuration fields
##
## @note only json-objects allowed.
##
## @param1[in] config_json: file name of the json config
## @param2[in] node_name: the json node/field to parse
## @param3[out] nrai_get_keys_by_node_return: string with parsed keys
##
## @throws ERR_WRONG_NUM_OF_INPUTS: for wrong number of arguments
## @throws ERR_FILE_NOT_FOUND (via getJsonType): if config json not found
## @throws ERR_JSON_NODE_NOT_FOUND (via getJsonType): if no json-node matching param2 is found
## @throws ERR_JSON_NODE_WRONG_TYPE: if json-node is not a json-object
##

## @fn
##
## @brief read string/number/boolean-node as string and throw error for other json-node-types
##
## @param1[in] config_json: file name of the json config
## @param2[in] node_name: the name of the node if want "evaluated"
## @param3[out] nrstr_get_value_by_key_return: string with parsed keys
##
## @throws ERR_WRONG_NUM_OF_INPUTS: for wrong number of arguments
## @throws ERR_FILE_NOT_FOUND (via getJsonType): if config json not found
## @throws ERR_JSON_NODE_NOT_FOUND (via getJsonType): if no json-node matching param2 is found
## @throws ERR_JSON_NODE_WRONG_TYPE: if json-node is not a json-object
##


################################################################################
# 88888b.   888    888 8888888 888     888888b.  8888888 8888888b.   .d8888b.  #
# 88  "88b  888    888   888   888     888 "Y88b 88      888   Y88b d88P  Y88b #
# 88  .88P  888    888   888   888     888   888 88      888    888 Y88b.      #
# 888888K.  888    888   888   888     888   888 88888   888   d88P  "Y888b.   #
# 88  "Y88b 888    888   888   888     888   888 88      8888888P"      "Y88b. #
# 88    888 888    888   888   888     888   888 88      888 T88b         "888 #
# 88   d88P Y88b..d88P   888   888     888 .d88P 88      888  T88b  Y88b  d88P #
# 888888P"   "Y8888P"  8888888 8888888 888888P"  8888888 888   T88b  "Y8888P"  #
################################################################################

## @fn
##
## @brief read and check validity if default values are given and use first element if not.
##
## @param1[in] config_json: file name of the json config
## @param2[in] json_key: the name of the node if want "evaluated"
## @param3[in] nrai_get_and_check_value_by_key_valid_values: list of valid default values
## @param4[out] nrai_get_keys_by_node_return: string with parsed keys
##
## @return default value either user defined or just first element in list
##

## @fn
##
## @brief parses configuration json and assembles a vector of string pairs (data, name)
##
## @param1[in] config_json: file name of the json config
## @param2[out] nria_create_input_data: name-reference to "return" parameter
##
## @return non
##

## @fn
##
## @brief reads view commands
##
## @param1[in] config_json: file name of the json config
## @param2[in] json_view: the currently active view
##

## @fn
##
## @brief create vector of menu options printed in selection menu
##
## @param1[in] config_json: file name of the json config
## @param2[in] nraa_get_user_input_menu_items: name-reference for menu items
## @param3[in] nraa_get_user_input_menu_opts: name-reference for menu options
##
## @param4[out] nraa_create_menu_items_return: name-reference for user selection
##
## @description: The option strings are assembled column wise in nested for loops to
## ensure a nicely aligned menu. Hence, the outer for loop takes each column command and
## evaluates the command for the current column in the first inner for loop which also
## tracks the widest entry. The second inner loop then just fills the elements of the
## freshly created options-array with spaces to uniform sizes.
##

## @fn
##
## @brief create vector of optional menu items
##
## @param1[in]: configuration JSON
## @param2[in]: currently active mode
##
## @param3[out]: associative array to assemble with optional options
##


################################################################################
# 8888888 888888b.   .d88888b.  88b    88 88888888 8888888 88b    888 88888b.  #
# 88      88   Y88b d88P" "Y88b 888b   88    88    88      888b   888 88 "Y88b #
# 88      88    888 888     888 8888b  88    88    88      8888b  888 88   888 #
# 88888   88   d88P 888     888 88Y88b 88    88    88888   88Y88b 888 88   888 #
# 88      888888P"  888     888 88 Y88b88    88    88      88 Y88b888 88   888 #
# 88      88 T88b   888     888 88  Y8888    88    88      88  Y88888 88   888 #
# 88      88  T88b  Y88b. .d88P 88   Y888    88    88      88   Y8888 88 .d88P #
# 88      88   T88b  "Y88888P"  88    Y88    88    8888888 88    Y888 88888P"  #
################################################################################

## @fn
##
## @brief Draws the menu.
##
## @param1[in] nraa_draw_menu_items: name-reference for menu items
## @param2[in] nraa_draw_menu_opts: name-reference for menu options
##

## @fn
##
## @brief get user input the menu.
##
## @param1[in] nraa_get_user_input_menu_items: name-reference for menu items
## @param2[in] nraa_get_user_input_menu_opts: name-reference for menu options
##
## @param3[out] string_get_user_input_return: name-reference for user selection
##

## @fn
##
## @brief .
##
## @param:
##

# batsify script, i.e. ensure nothing is executed if this file is just sourced/loaded
